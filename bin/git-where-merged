#!/usr/bin/perl

$| = 1;

use strict;
use warnings;

no warnings ('recursion');

use FindBin;
use lib "$FindBin::RealBin/../libs";

use Amling::Git::Utils;

if(@ARGV < 1)
{
    die "Usage: $0 <main branch> <query commit>...";
}

my $master = shift;
my $master_commit = Amling::Git::Utils::convert_commitlike($master);

for my $query (@ARGV)
{
    my $query_commit = Amling::Git::Utils::convert_commitlike($query);

    my %commits;
    {
        my $cb = sub
        {
            my $commit = shift;
            $commits{$commit->{'hash'}} = $commit;
        };
        Amling::Git::Utils::log_commits(['--boundary', "^$query_commit", $master_commit], $cb);
    }

    my $path = find(\%commits, $master_commit, $query_commit, {});
    if(!defined($path))
    {
        print "$query: ?\n";
    }
    else
    {
        print "$query:\n";
        for my $commit (@$path)
        {
            print "    $commit " . $commits{$commit}->{'subj'} . "\n";
        }
    }
}

sub find
{
    my $commits = shift;
    my $commit = shift;
    my $query_commit = shift;
    my $already_checked = shift;

    if($query_commit eq $commit)
    {
        return [$commit];
    }

    if($already_checked->{$commit})
    {
        return undef;
    }
    $already_checked->{$commit} = 1;

    my $commit_data = $commits->{$commit};
    return undef unless(defined($commit_data));

    my @parents = @{$commit_data->{'parents'}};
    if(@parents)
    {
        my $path = find($commits, $parents[0], $query_commit, $already_checked);
        return $path if(defined($path));
    }

    for(my $i = 1; $i < @parents; ++$i)
    {
        my $path = find($commits, $parents[$i], $query_commit, $already_checked);
        return [$commit, @$path] if(defined($path));
    }

    return undef;
}
