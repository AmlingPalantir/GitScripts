#!/usr/bin/perl

$| = 1;

use strict;
use warnings;

no warnings ('recursion');

use FindBin;
use lib "$FindBin::RealBin/../libs";

use Amling::Git::Utils;

if(@ARGV < 1)
{
    die "Usage: $0 <main branch> <query commit>...";
}

my $master = shift;

my $master_commit;
my %parents;
my %subjects;
{
    open(my $fh, '-|', 'git', 'log', '--format=%H:%P:%s', $master) || die "Cannot open git log $master: $!";
    while(my $l = <$fh>)
    {
        chomp $l;
        my ($commit, $parents_string, $subject);
        if($l =~ /^([^:]*):([^:]*):(.*)$/)
        {
            ($commit, $parents_string, $subject) = ($1, $2, $3);
        }
        else
        {
            die "Bad: $l";
        }
        $master_commit = $commit unless(defined($master_commit));
        $parents{$commit} = [split(/ /, $parents_string)];
        $subjects{$commit} = $subject;
    }
    close($fh) || die "Cannot close git log $master: $!";
}

for my $query (@ARGV)
{
    my $r = find($master_commit, Amling::Git::Utils::convert_commitlike($query), {});
    $r = "?" unless(defined($r));
    print "$query: $r\n";
}

sub find
{
    my $commit = shift;
    my $query_commit = shift;
    my $already_checked = shift;

    if($query_commit eq $commit)
    {
        return "$commit";
    }

    if($already_checked->{$commit})
    {
        return undef;
    }
    $already_checked->{$commit} = 1;

    my @parents = @{$parents{$commit}};
    if(@parents)
    {
        my $r = find($parents[0], $query_commit, $already_checked);
        return $r if(defined($r));
    }

    for(my $i = 1; $i < @parents; ++$i)
    {
        my $r = find($parents[$i], $query_commit, $already_checked);
        return "$commit, $r" if(defined($r));
    }

    return undef;
}
