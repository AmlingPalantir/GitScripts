#!/usr/bin/perl

# Copyright (C) 2010   Keith Amling, keith.amling@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

$| = 1;

use strict;
use warnings;

use FindBin;
use lib "$FindBin::RealBin/../libs";

use Amling::Git::G3MD::Parser;
use Amling::Git::G3MD::Resolver::Git;
use Amling::Git::G3MD::Resolver;
use Amling::Git::Utils;
use Getopt::Long;

my $read_index = 0;
my $write_index;

my @options =
(
    'read-index!' => \$read_index,
    'write-index!' => \$write_index,
    'help' => sub { usage(0); },
);

GetOptions(@options) || usage(1);

my @f = @ARGV;
@ARGV = ();

for my $f (@f)
{
    my $blocks;
    if($read_index)
    {
        $blocks =
        [
            [
                'CONFLICT',
                "$f:LHS",
                Amling::Git::Utils::show(":2:./$f"),
                "$f:MHS",
                Amling::Git::Utils::show(":1:./$f"),
                "$f:RHS",
                Amling::Git::Utils::show(":3:./$f"),
            ],
        ];
        $blocks = Amling::Git::G3MD::Resolver::Git->resolve_blocks($blocks);
    }
    else
    {
        my $lines = Amling::Git::Utils::slurp($f);
        $blocks = Amling::Git::G3MD::Parser::parse_3way($lines);
    }
    my $lines2 = Amling::Git::G3MD::Resolver::resolve_blocks($blocks);
    Amling::Git::Utils::unslurp($f, $lines2);
    if($write_index)
    {
        my $blocks2 = Amling::Git::G3MD::Parser::parse_3way($lines2);
        my $conflict = 0;
        for my $block (@$blocks2)
        {
            my $type = $block->[0];

            if(0)
            {
            }
            elsif($type eq 'LINE')
            {
                next;
            }
            elsif($type eq 'CONFLICT')
            {
                $conflict = 1;
            }
            else
            {
                die;
            }
        }
        if($conflict)
        {
            print "$f: still has conflicts, not adding to git index!\n";
        }
        else
        {
            (system('git', 'add', $f) == 0) || die "Could not system git add $f: $!";
            print "$f: successfully resolved and added to git index.\n";
        }
    }
}

sub usage
{
    my $ec = shift;

    print <<EOF;
Usage: git-3way-merge-of-doom <options> [<files>]
   --read-index                  Read file contents out of conflicted git index
                                 instead of file contents in working tree.
                                 onto and add it as a minus.
   --write-index                 Add files to git index if resolution looks
                                 clean (no conflict blocks remain).
   --help                        Print this help.

Options to resolve at the prompt are:
EOF
    print map { "   $_\n" } @{Amling::Git::G3MD::Resolver->all_help()};

    exit $ec;
}
