#!/usr/bin/perl

# Copyright (C) 2010   Keith Amling, keith.amling@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

$| = 1;

use strict;
use warnings;

use FindBin;
use lib "$FindBin::RealBin/../libs";

use Amling::Git::GRD::Exec::Context;
use Amling::Git::GRD::CodeGeneration;
use Amling::Git::GRD::Parser;
use Amling::Git::GRD::Utils;
use Amling::Git::Utils;
use Getopt::Long;

# TODO: no die's!  need to all call common bail() infrastructure so we can reset cleanly, maybe even need to allow expectation to be passed into bail() and bail can give user option to cleanup to meet it and continue...
# TODO: several failures (e.g.  any convert_commitlike, any actual commit (think of empty change!)) could probably stand for more graceful handling
# TODO: audit messages before each shell invocation indicating expected state and obvious options

my $code_gen = Amling::Git::GRD::CodeGeneration->new();
my $skip_edit;
my $dry_run;

my @options =
(
    $code_gen->options(),

    "skip-edit|q" => \$skip_edit,
    "dry-run|n" => \$dry_run,
    "help" => sub { usage(0); },

);

my $reason = join(" ", "GRD", @ARGV);

GetOptions(@options) || usage(1);

$code_gen->finish_options();

# we use "<>" for STDIN very soon
@ARGV = ();

my $lines = $code_gen->generate();

if($dry_run)
{
    for my $line (@$lines)
    {
        print "$line\n";
    }
    exit 0;
}

Amling::Git::GRD::Utils::run_shell(0, 0, 0);

my @commands = @{Amling::Git::GRD::Parser::edit_loop($lines, $skip_edit)};
unless(@commands)
{
    print "Nothing to do.\n";
    exit 0;
}

my $ctx = Amling::Git::GRD::Exec::Context->new();

my $ct = scalar(@commands);
my $n = 1;
for my $command (@commands)
{
    print "Interpretting ($n/$ct): " . $command->str() . "\n";
    ++$n;

    $command->execute($ctx);
}

{
    my $branches = $ctx->get('branches', {});
    for my $branch (sort(keys(%$branches)))
    {
        print "Updating: $branch => " . $branches->{$branch} . "\n";
        Amling::Git::Utils::run_system("git", "update-ref", "-m", $reason, "refs/heads/$branch", $branches->{$branch}) || die "Cannot update $branch";
    }
}

{
    my $head = $ctx->get('head');
    if(defined($head))
    {
        my ($type, $v1) = @$head;

        if($type == 0)
        {
            print "Leaving detached head at $v1.\n";
            Amling::Git::Utils::run_system("git", "checkout", $v1) || die "Cannot checkout $v1";
        }
        elsif($type == 1)
        {
            print "Leaving head at branch $v1.\n";
            Amling::Git::Utils::run_system("git", "checkout", $v1) || die "Cannot checkout $v1";
        }
        else
        {
            die "Unknown head type: $type";
        }
    }
    else
    {
        print "No head set?  Leaving wherever.\n";
    }
}

print "Done.\n";
my $grd_level = $ENV{'GRD_LEVEL'};
if($grd_level)
{
    print "Still inside GRD!\n";
    print "GRD level: " . $grd_level . "\n";
}

sub usage
{
    my $ec = shift;

    print <<EOF;
Usage: git-rebase-of-doom <options> [<extra arguments>]
   --onto <commit>               Use this as the default destination to rebase
                                 onto and add it as a minus.
   --head <commit>               Use this as a source of commits and leave HEAD
                                 at their tip.

   --plus <commit>               Use this as a source of commits.
   --minus <commit>[:<commit>]   Use this as a source of commits to exclude and
                                 change parent links to these to point to the
                                 second argument.  This second argument may be
                                 SELF to indicate to leave the links unaltered
                                 (but stop generating the script "before" them)
                                 and defaults to whatever the last --onto was.
   --fixed-minus <commit>        Alias for --minus <commit>:SELF

   --tree <commit>               Firklewitz this commit.

   --skip-edit | -q              Skip editting by default.
   --dry-run | -n                Just print the generated script, don't
                                 actually do anything.
   --help                        Print this help.

Extra arguments are handled as follows:

*) If there has been no explicit --[fixed-]minus and this rule hasn't been used yet then:
    *) If there has been --onto use the argument as --minus.
    *) Otherwise use it as --onto.
*) Otherwise, if there has been no --head use the argument as --head.
*) Otherwise, it use the argument as --plus.

Additionally, if no --plus, --head, or -tree is specified --head HEAD is added
at the end.

This means that one and two extra act roughly as they do in plain git-rebase so
simple examples generally are the same.  For example:

# Rebase the HEAD branch up to the tip of master
git-rebase-of-doom master
git-rebase-of-doom --onto master --head HEAD

# Rebase feature up to the tip of master
git-rebase-of-doom master feature
git-rebase-of-doom --onto master --head feature

# Rebase ^elsewhere ^master feature onto elsewhere.
git-rebase-of-doom --onto elsewhere master feature

# Rebase feature up to the tip of master but exclude commits from dev as well.
git-rebase-of-doom master --minus dev feature
git-rebase-of-doom --onto master --minus dev --head feature

The "language" the generated script is composed of is similar to normal rebase
but has some key differences.  Rebase commands can be translated as follows:

"pick" - As is.

"fixup" - As is.

"reword" - Use "pick <commit> <message>" to edit the commit message right in
the rebase script itself.

"squash" - Replaced by "splatter", see details below.

"edit" - Replace "edit <commit>" with "pick <commit>" plus "edit" and you'll
get a shell invoked by GRD rather than it exiting and expecting --continue.

A more complete reference follows:

branch <name>
    Save HEAD's current position as a branch when the rebase completes.
    Existing branches are clobbered silently.

edit
    Re-entrantly run a shell at this point.  Within the shell you can move HEAD
    anywhere you like however you like (including nested invocations of GRD)
    and the script will resume wherever you've left it.  Within the shell
    GRD_LEVEL will be set appropriately (starts at 1) to indicate how many
    nested GRDs are in progress.

fixup <commitlike>
    Amend HEAD with a pick of <commitlike> without interaction (retains HEAD's
    existing commit message).

fsplatter
    Pop a commit off the commit stack (see push/pop).  Then flatten all changes
    "since" then with the commit message of the first change since then.
    Analogous to splatter but always picks the first commit's message without
    interaction.

head
    Save HEAD's current position and return HEAD there when the rebase
    completes.

head <name>
    Save HEAD's current position as a branch when the rebase completes and set
    HEAD to that branch (again, when the rebase completes).  Existing branches
    are clobbered silently.

load (tag:<tag> | <commitlike>)
    Move HEAD to a saved tag or a commitlike.

merge (tag:<tag> | <commitlike>)+
    Check out the first saved tag or commitlike and then merge the remaining
    saved tags and commitlikes into it.

cached-merge <template> (tag:<tag> | <commitlike>)+
    As merge but if <template> has the exact same parents reuse it directly
    rather than repeating the merge.

pick <commitlike> [<message>]
    Cherry-pick a commit, then optionally alter its message (without
    interaction).

pop
    Pop a commit off the commit stack (see push).

push
    Push HEAD's current position onto the commit stack (see pop).

save <tag>
    Save HEAD's current position as a tag (see load/merge).

splatter [<message>]
    Pop a commit off the commit stack (see push/pop).  Then flatten all changes
    "since" then into one.  If the commit message for the flat commit is not
    given an editor will be opened with the combined commit messages of the
    intervening commits.  This is intended to be used to replace rebase's
    squash.  Pick, squash, squash, ..., squash becomes push, pick, pick, ...,
    pick, splatter.

squash <commitlike> [<message>]
    Equivalent to "pick <commitlike> [<message>]" followed by a splatter to
    HEAD~2.  In particular a long string of these in a row is not what you want
    to replicated rebase's squash (see splatter).
EOF

    exit $ec;
}
