#!/usr/bin/perl

# Copyright (C) 2010   Keith Amling, keith.amling@gmail.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

$| = 1;

use strict;
use warnings;

use Getopt::Long;

Getopt::Long::Configure('no_getopt_compat');

my $dry_run = 0;
my @args;

GetOptions(
    'dry-run|n!' => \$dry_run,
    '<>' => sub
    {
        my $arg = '' . $_[0];

        push @args, $arg;
    }
) || die;

my @fetch;
{
    open(my $fh, '-|', 'git', 'config', '-l') || die "Could not open git config -l: $!";
    while(my $l = <$fh>)
    {
        chomp $l;
        if($l =~ /^remote\.([^.=]*)\.fetch=\+?(refs\/[^:]*):(refs\/[^:]*)$/)
        {
            my $remote = $1;
            my $from = $2;
            my $to = $3;

            next unless($from =~ /^([^*]*\/|^)\*(\/[^*]*|$)$/);
            my $from_prefix = $1;
            my $from_suffix = $2;

            next unless($to =~ /^([^*]*\/|^)\*(\/[^*]*|$)$/);
            my $to_prefix = $1;
            my $to_suffix = $2;

            push @fetch, [$remote, $from_prefix, $from_suffix, $to_prefix, $to_suffix];
        }
    }
    close($fh) || die "Could not close git config -l: $!";
}

my %pushes;
for my $spec (@args)
{
    if($spec =~ /^(\+?)([^:]*):([^:]*)$/)
    {
        my $force = $1;
        my $commitlike = $2;
        my $tracking = $3;

        my $tracking_full;
        {
            open(my $fh, '-|', 'git', 'rev-parse', '--symbolic-full-name', $tracking) || die "[$spec] Could not open git rev-parse --symbolic-full-name $tracking: $!";
            my $l = <$fh> || die "[$spec] No output for git rev-parse --symbolic-full-name $tracking";
            chomp $l;
            $tracking_full = $l;
            close($fh) || die "[$spec] Could not open git rev-parse --symbolic-full-name $tracking: $!";
        }

        my @match;
        for my $fetch (@fetch)
        {
            my ($remote, $from_prefix, $from_suffix, $to_prefix, $to_suffix) = @$fetch;
            if($tracking_full =~ /^\Q$to_prefix\E(.*)\Q$to_suffix\E$/)
            {
                push @match, [$remote, "$from_prefix$1$from_suffix"];
            }
        }
        if(!@match)
        {
            die "[$spec] No fetch matches for $tracking_full";
        }
        if(@match > 1)
        {
            die "[$spec] Multiple fetch matches for $tracking_full: " . join(', ', map { $_->[0] . ":" . $_->[1] } @match);
        }
        my $match = $match[0];
        my ($remote, $branch) = @$match;

        push @{$pushes{$remote} ||= []}, "$force$commitlike:$branch";
    }
    else
    {
        die "[$spec] Doesn't match push format at all?";
    }
}

for my $remote (keys(%pushes))
{
    my @command = ('git', 'push', $remote, @{$pushes{$remote}});
    print 'Push: ' . join(' ', @command) . "\n";
    if(!$dry_run)
    {
        system(@command) == 0 || die "Failed: $?";
    }
}
