G3MD
    resolvers
        [something to] handle indent conflict better by semimatching projected lines so we only conflict on the relevant part
            in particular we allow ("a","a"," a") -> " a" but not e.g.  ("  a","a"," a")
        maybe bring slow/exact character merge back
            that example from Carl was handled way less well by `git merge-file`
    "auto" resolvers tried automatically on each block (right now "g" is sort of being used like this but we can make it first class and have an option to add "mq" as well)
        conceivably one might want to force "mr" delegation as well but that's less clear...
    redo overall recursive structure
        in particular we'd like to be able to view context and in some cases merge with context
        this will require special work for punt and m*
        in particular, m* structure will almost certainly have to change entirely
GRD
    various cleanup (in script as TODO)
    maybe try to figure out "already merged" changes and skip them
        git-cherry/git-patch-id can give us the data we need
        unclear in general case what with the multiple places we could be playing onto...
            maybe invoking cherry on each onto/plus pair and then seeding the ontos as containing those commits?
            we'd also need to have pick generate as NOP if it's already "contained" in the top
    allow return to editting script at some failure points
        ideally we'd dump the saved map, stack, etc.  into the script and so just drop state and run the new script from the beginning
GBD
    track good/bad sets and be able to view the history (similar to "git bisect log")
    probabilistic bisect
        this is where you can run but a "good" doesn't mean good, it means it didn't show
        there's no end condition, just the current best guess and the confidence for it
        unclear if this should be part of GBD or be its own tool
    split good and presumed good
        something tested is "good", ancestors not yet tested are "presumed good"
        only difference is if we get to bad with "presumed good" parents we have to test them
            if one of them tests bad we work from there again
            if all of them test good we're done
github pull requester
    worked: curl -n -d '{"title":"Please pull upstream/20110915-typo-fix","base":"8e90ecf3b8edae14b1b34663a7e0298040bf6435","head":"5a9814923942b2099862aa6503c8af8bd7b3e7d9"}' 'https://api.github.com/repos/benbernard/RecordStream/pulls'
    also worked: curl -n -d '{"title":"Please pull upstream/20110915-other-doc","base":"benbernard:master","head":"amling:upstream/20110915-other-doc"}' 'https://api.github.com/repos/benbernard/RecordStream/pulls'

GRD DL
    Something like:
    > return [
    >     $g->pick('abcdef'), # ->msg('...'),
    >     $g->edit(),
    >     $g->splatter([
    >         $g->pick(...),
    >         $g->pick(...),
    >     ]),
    >     sub {
    >         if($g->head()->{'subj'} =~ ...) {
    >             $g->run([              # actually runs it
    >                 $g->pick('...'),   # only creates a pick object
    >             ]);
    >         }
    >     },
    > ];
    Unfortunately it's pretty damned verbose and still obtuse
    Maybe mixed?
    > pick abcdef # ...
    > edit
    > push
    > pick ...
    > pick ...
    > splatter
    > <% # evaluated as sub { my $g = shift; ... } at parse time
    >     if(...) {
    >         $g->pick('...'); # actually runs pick since pick object has little to no point here
    >     }
    > %>
    Change parser to read-ahead lines, hooks-add parser has to trim first line when recursively parsing, e.g.
    > hooks-add post-pick perl
    > if($g->head()->subj() =~ /TODO/) {
    >     $g->edit();
    > }
    > /perl
    Still have to jackass up registry of $g methods from commands
        $g->eval("edit") probably suffices
    $g library
        ->eval(@lines) # runs GRD script, super crash on parse error
        ->head() # returns HEAD commit as convenience
        ->commit($commitlike) # returns commit as convenience (e.g.  "HEAD^")
        ->context() # GRD context because why not
