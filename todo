G3MD
    resolvers
        [something to] handle indent conflict better by semimatching projected lines so we only conflict on the relevant part
            in particular we allow ("a","a"," a") -> " a" but not e.g.  ("  a","a"," a")
        maybe bring slow/exact character merge back
            that example from Carl was handled way less well by `git merge-file`
    "auto" resolvers tried automatically on each block (right now "g" is sort of being used like this but we can make it first class and have an option to add "mq" as well)
        conceivably one might want to force "mr" delegation as well but that's less clear...
    redo overall recursive structure
        in particular we'd like to be able to view context and in some cases merge with context
        this will require special work for punt and m*
        in particular, m* structure will almost certainly have to change entirely
GRD
    various cleanup (in script as TODO)
    maybe try to figure out "already merged" changes and skip them
        git-cherry/git-patch-id can give us the data we need
        unclear in general case what with the multiple places we could be playing onto...
            maybe invoking cherry on each onto/plus pair and then seeding the ontos as containing those commits?
            we'd also need to have pick generate as NOP if it's already "contained" in the top
    allow return to editting script at some failure points
        ideally we'd dump the saved map, stack, etc.  into the script and so just drop state and run the new script from the beginning
    aliases or something?
        I keep typing "hooks-add post-pick verify ./gradlew compileJava" and I'm getting sick of it
GBD
    parallel bisect
        mostly just speculation on top of existing data structure
        also, we can easily handle multiple failures
            provide a script to run to produce failures, we'll run it on tip and bisect down any failures (from tip anyway)
    probabilistic bisect
        "good" doesn't mean good, it means no failure
        can't use MLE for choosing bad commit or it amounts to running real bisect, then hammering parents (and if they break repeat from there)
            this is especially horrible for low probability of failure
        we could, for each commit, choose failure prob to maximize likelihood of it being the bad and use that as weight (times user weight of course)
            if any failed ancestors then can't be it (in fact, only look at ancestors of an earlierst failure)
            if there are N passes in descendents and M failures then failure prob is M/(N+M)
                likelihood is N^N M^M / (N+M)^(N+M)
                if no failed descendents?
                    probably don't allow this, it's not statistically legit but it will be eventually OK to count initial failure towards stats
                if no passed descendents likelihood is 1
        unfortunately shares basically no data structure with other cases
        and we probably want to parallelize here as well
            well, maybe not
            in some cases I'd like to give a script and parallelize
            in others I still have to run manually
github pull requester
    worked: curl -n -d '{"title":"Please pull upstream/20110915-typo-fix","base":"8e90ecf3b8edae14b1b34663a7e0298040bf6435","head":"5a9814923942b2099862aa6503c8af8bd7b3e7d9"}' 'https://api.github.com/repos/benbernard/RecordStream/pulls'
    also worked: curl -n -d '{"title":"Please pull upstream/20110915-other-doc","base":"benbernard:master","head":"amling:upstream/20110915-other-doc"}' 'https://api.github.com/repos/benbernard/RecordStream/pulls'
